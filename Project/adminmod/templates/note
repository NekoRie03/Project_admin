so here's my adbstractuser:

class User(AbstractUser):
    email = models.EmailField(unique=True)
    username = models.CharField(max_length=150, unique=True, null=True, blank=True)
    class Role(models.TextChoices):
        ADMIN = "ADMIN", "Admin"
        STUDENT = "STUDENT", "Student"
        GUARD = "GUARD", "Guard"

    base_role = Role.ADMIN

    role = models.CharField(max_length=50, choices=Role.choices, default='student')

    def save(self, *args, **kwargs):
        if not self.pk:
            self.role = self.base_role
            return super().save(*args, **kwargs)


class StudentManager(BaseUserManager):
    def get_queryset(self, *args, **kwargs):
        results = super().get_queryset(*args, **kwargs)
        return results.filter(role=User.Role.STUDENT)

class Student(User):

    base_role = User.Role.STUDENT

    student = StudentManager()

    class Meta:
        proxy = True

    def welcome(self):
        return "Only for students"


@receiver(post_save, sender=Student)
def create_user_profile(sender, instance, created, **kwargs):
    if created and instance.role == "STUDENT":
        StudentProfile.objects.create(user=instance)


class StudentProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    student_id = models.IntegerField(null=True, blank=True)


class GuardManager(BaseUserManager):
    def get_queryset(self, *args, **kwargs):
        results = super().get_queryset(*args, **kwargs)
        return results.filter(role=User.Role.GUARD)


class Guard(User):

    base_role = User.Role.GUARD

    guard = GuardManager()

    class Meta:
        proxy = True

    def welcome(self):
        return "Only for guards"


class GuardProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    guard_id = models.IntegerField(null=True, blank=True)


@receiver(post_save, sender=Guard)
def create_user_profile(sender, instance, created, **kwargs):
    if created and instance.role == "GUARD":
        GuardProfile.objects.create(user=instance)
#"""
#end mulitiuser


class Signup(models.Model):
    first_name = models.CharField(max_length=50, verbose_name='First Name')
    middle_initial = models.CharField(max_length=1, null=True, blank=True, verbose_name='Middle Initial')
    last_name = models.CharField(max_length=50, verbose_name='Last Name')
    idnumber = models.CharField(max_length=20, unique=True, verbose_name='ID Number')
    email = models.EmailField(unique=True, verbose_name='Email')
    password = models.CharField(max_length=8, verbose_name='Password')
    confirmpass = models.CharField(max_length=8, verbose_name='Confirm Password')
    program1 = models.ForeignKey(DropdownOption, on_delete=models.CASCADE, null=True)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, null=True)
    section = models.ForeignKey(Section, on_delete=models.CASCADE, null=True)
    id_picture = models.FileField(upload_to='id_pictures/', verbose_name='ID Picture')
    registration_cert = models.FileField(upload_to='registration_certs/', verbose_name='Certificate of Registration (COR)')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"